## Dokumentation: OSMP-Runner – Praktikumstermin 1

### Ziel des Programms
- Entwicklung eines OSMP-Runners, der eine definierte Anzahl Prozesse mit gemeinsamen Parametern startet
- Funktionen: Logging, flexible Argumentverarbeitung, Fehlerbehandlung



### Prozessmanagement

#### fork()
- Dupliziert den aktuellen Prozess → erzeugt Kindprozess
- Eltern- und Kindprozess laufen parallel
- Kindprozess wenn: `fork() == 0`

#### execvp()
- v = Vector (Array) 
- p = Path
- Ersetzt den Kindprozess durch ein neues Programm
- Übergibt Argumente als Array
- Sucht Executable über Umgebungsvariable `PATH`

#### Entscheidung für execvp()
- Unterstützt Argumentlisten (argv[])
- Flexible Pfadangaben (relativ oder absolut)
- Gut für Shell Kommandos (z. B. ./echoAll)



### Prozessbeendigung

#### wait()
- Blockiert Elternprozess, bis ein Kindprozess beendet ist
- Liefert PID des beendeten Prozesses
- waitpid() für besondere pid Prozesse

#### WIFEXITED() / WEXITSTATUS()
- Prüft, ob Kindprozess normal beendet wurde
- Gibt Exit-Code zurück



### Fehlererkennung & Behandlung

#### execvp() Fehler
- Rückgabe: -1
- perror() + Logging auf Level 3 ("Exec failed")
- Kindprozess: exit(EXIT_FAILURE)

#### fork() / wait() Fehler
- Erkennung über pid < 0 bzw. pid == -1
- Fehlerausgabe + Logging (Level 3)



### Logging-Funktionalität

#### Struktur
- Zeitstempel, PID, Nachricht
- Zentrale Datei (Pfad per `-l logfile`)
- Filterung über Log-Level `-v [1-3]` TODO

#### Log-Level
| Level | Bedeutung                              |
--------------------------------------------------
| 1     | Standard (Start/Ende Prozesse)         |
| 2     | Speicheraktionen (malloc)              |
| 3     | Fehler (Fork/Exec/Wait gescheitert)    |



### Argumentverarbeitung
- getopt() für Kommandozeilenargumente
  -p: Anzahl Prozesse (**Pflicht**)
  -l: Logdateipfad (optional)
  -v: Log-Verbosity (optional, Standard: 1)
  -e: Executable + Parameter (**Pflicht**)



#### Beispielaufruf
./osmprun -p 3 -l run.log -v 2 -e ./echoAll hallo welt



### Entscheidungen
- execvp() für flexible, sichere Programmausführung
- Logging zur Laufzeitbeobachtung und Fehlersuche
- strtol() statt atoi() für sichere Konvertierung
- Fehlerhandling mit perror(), Statuscodes und Logging
- Argumentoperationen durch getopt() umgesetzt


## OSMP-API: Init, Size und Rank

### Was machen die Funktionen?

#### OSMP_Init()
- Startet die OSMP-Bibliothek im aktuellen Prozess
- Verbindet sich mit dem Shared Memory (vom Runner erstellt)
- Liest die Anzahl aller Prozesse und die eigene Position (Rank)

#### OSMP_Size()
- Gibt die Gesamtanzahl aller OSMP-Prozesse zurück
- Muss nach `OSMP_Init()` aufgerufen werden

#### OSMP_Rank()
- Gibt den Rang (Index) des aktuellen Prozesses zurück
- Muss nach `OSMP_Init()` aufgerufen werden



### Wie funktioniert das intern?

#### Gemeinsamer Speicher (Shared Memory)
- Alle Prozesse greifen auf denselben Speicherbereich zu
- Dieser wird vom Runner vor dem Start erstellt
- Enthält:
  - Anzahl der Prozesse
  - Liste der PIDs
  - Kommunikationsdaten

#### OSMP_Init()
- Verbindet sich mit dem Shared Memory 
- Vergleicht eigene PID mit gespeicherter Liste
- Speichert eigenen Rang (Index) in globaler Variable

#### OSMP_Size()
- Liest die Anzahl der Prozesse aus dem Shared Memory

#### OSMP_Rank()
- Gibt den gespeicherten Rang zurück




